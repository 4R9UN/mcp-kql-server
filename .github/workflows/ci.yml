name: MCP KQL Server CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  basic-validation:
    name: Basic Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Validate project structure
      run: |
        python -c "
        import os
        import sys
        
        print('üìÅ Validating project structure')
        
        required_files = [
            'pyproject.toml',
            'README.md', 
            'LICENSE',
            'mcp_kql_server/__init__.py'
        ]
        
        missing_files = []
        for file in required_files:
            if os.path.exists(file):
                print(f'‚úÖ Found: {file}')
            else:
                print(f'‚ùå Missing: {file}')
                missing_files.append(file)
        
        if missing_files:
            print(f'‚ùå Missing files: {missing_files}')
            sys.exit(1)
        else:
            print('‚úÖ All required files found')
        "
    
    - name: Test package build
      run: |
        python -c "
        print('üì¶ Testing package build')
        import subprocess
        import sys
        
        try:
            result = subprocess.run([sys.executable, '-m', 'build'], 
                                  capture_output=True, text=True, check=True)
            print('‚úÖ Package built successfully')
        except subprocess.CalledProcessError as e:
            print(f'‚ùå Build failed: {e}')
            print(f'stdout: {e.stdout}')
            print(f'stderr: {e.stderr}')
            sys.exit(1)
        "
    
    - name: Test package check
      run: |
        python -c "
        print('üîç Testing package integrity')
        import subprocess
        import sys
        import os
        
        if not os.path.exists('dist'):
            print('‚ùå No dist directory found')
            sys.exit(1)
        
        dist_files = os.listdir('dist')
        if not dist_files:
            print('‚ùå No files in dist directory')
            sys.exit(1)
        
        print(f'‚úÖ Found {len(dist_files)} distribution files')
        for file in dist_files:
            print(f'  - {file}')
        
        try:
            subprocess.run(['twine', 'check'] + [f'dist/{f}' for f in dist_files], 
                         check=True, capture_output=True)
            print('‚úÖ Package integrity check passed')
        except subprocess.CalledProcessError as e:
            print(f'‚ö†Ô∏è Package check warning (not critical): {e}')
        "

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check formatting
      run: |
        python -c "
        print('üé® Checking code formatting')
        import subprocess
        import sys
        import os
        
        if not os.path.exists('mcp_kql_server'):
            print('‚ö†Ô∏è mcp_kql_server directory not found, skipping formatting check')
            sys.exit(0)
        
        try:
            subprocess.run(['black', '--check', 'mcp_kql_server/'], check=True, capture_output=True)
            print('‚úÖ Black formatting check passed')
        except subprocess.CalledProcessError:
            print('‚ö†Ô∏è Black formatting issues found (not critical for CI)')
        
        try:
            subprocess.run(['isort', '--check-only', 'mcp_kql_server/'], check=True, capture_output=True)
            print('‚úÖ Import sorting check passed')
        except subprocess.CalledProcessError:
            print('‚ö†Ô∏è Import sorting issues found (not critical for CI)')
        
        try:
            subprocess.run(['flake8', 'mcp_kql_server/', '--max-line-length=100'], check=True, capture_output=True)
            print('‚úÖ Flake8 linting passed')
        except subprocess.CalledProcessError:
            print('‚ö†Ô∏è Linting issues found (not critical for CI)')
        
        print('‚úÖ Code quality checks completed')
        "

  multi-platform-test:
    name: Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.10', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Basic compatibility test
      run: |
        python -c "
        import sys
        import os
        
        print(f'üêç Python {sys.version}')
        print(f'üíª Platform: ${{ matrix.os }}')
        
        # Basic file existence check
        if os.path.exists('mcp_kql_server'):
            print('‚úÖ Package directory found')
        else:
            print('‚ùå Package directory missing')
            sys.exit(1)
        
        if os.path.exists('mcp_kql_server/__init__.py'):
            print('‚úÖ Package __init__.py found')
        else:
            print('‚ùå Package __init__.py missing')
            sys.exit(1)
        
        if os.path.exists('pyproject.toml'):
            print('‚úÖ pyproject.toml found')
        else:
            print('‚ùå pyproject.toml missing')
            sys.exit(1)
        
        print('‚úÖ Basic compatibility test passed')
        "

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [basic-validation, code-quality, multi-platform-test]
    if: always()
    
    steps:
    - name: Print summary
      run: |
        python -c "
        print('üèÅ CI/CD Pipeline Summary')
        print('========================')
        print('')
        
        results = {
            'Basic Validation': '${{ needs.basic-validation.result }}',
            'Code Quality': '${{ needs.code-quality.result }}', 
            'Multi-Platform Test': '${{ needs.multi-platform-test.result }}'
        }
        
        success_count = 0
        for job, result in results.items():
            status = '‚úÖ' if result == 'success' else '‚ùå' if result == 'failure' else '‚ö†Ô∏è'
            print(f'{status} {job}: {result}')
            if result == 'success':
                success_count += 1
        
        print('')
        print(f'üìä Success Rate: {success_count}/{len(results)} jobs passed')
        
        if success_count == len(results):
            print('üéâ All pipeline stages passed!')
            print('üöÄ Repository is ready!')
        else:
            print('‚ö†Ô∏è Some jobs had issues but pipeline completed')
        "

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [basic-validation, code-quality, multi-platform-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true